package br.com.smarttech.acs.iget.activity;

import android.content.Context;
import android.content.ContextWrapper;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.support.v7.widget.Toolbar;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ImageView;
import android.widget.Toast;


import com.google.firebase.auth.FirebaseAuth;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

import br.com.smarttech.acs.iget.R;
import br.com.smarttech.acs.iget.adapter.PostagemAdapter;
import br.com.smarttech.acs.iget.helper.ConfiguracaoFirebase;
import br.com.smarttech.acs.iget.listener.RecyclerItemClickListener;
import br.com.smarttech.acs.iget.model.Compra;
import br.com.smarttech.acs.iget.model.Produto;
import br.com.smarttech.acs.iget.model.RelCompraProduto;
import br.com.smarttech.acs.iget.repository.CompraRepository;
import br.com.smarttech.acs.iget.repository.Repository;

public class HomeActivity extends AppCompatActivity {

    private RecyclerView recyclerPostagem;
    private List<Produto> postagens = new ArrayList<>();
    private List<Compra> compras = new ArrayList<>();
    private LayoutInflater layoutInflater;

    private Repository repository;

    ContextWrapper cw;
    File diretorio;
    String caminho;
    Produto produto;
    int idProduto;
    String idUsuarioLogado;
    Compra compra;
    RelCompraProduto relCompraProduto;
    CompraRepository compraRepository;

    private FirebaseAuth autenticacao;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_home);

        repository = new Repository(getApplicationContext());
        compraRepository = new CompraRepository(getApplicationContext());

        //diretorio de imagens
        cw = new ContextWrapper(getApplicationContext());
        diretorio = cw.getDir("igetImageDir", Context.MODE_PRIVATE);
        caminho = String.valueOf(diretorio);
        produto = new Produto();
        idProduto = produto.getId();

        compra = new Compra();


        //vincula com o objeto criado no xml
        recyclerPostagem = findViewById(R.id.recyclerViewPostagem);

        //inicia firebase
        autenticacao = ConfiguracaoFirebase.getFirebaseAutenticacao();

        //Define o layout
        RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
        recyclerPostagem.setLayoutManager(layoutManager);

        //Define o adapter
        this.prepararPostagens();
        PostagemAdapter adapter = new PostagemAdapter(postagens);
        recyclerPostagem.setAdapter(adapter);

        //Evento de compra
        recyclerPostagem.addOnItemTouchListener(new RecyclerItemClickListener(this, recyclerPostagem, new RecyclerItemClickListener.OnItemClickListener() {
            @Override
            public void onItemClick(View view, int position) {
            }

            @Override
            public void onLongItemClick(View view, int position) {
                Produto produtoSelecionado = postagens.get(position);
                idUsuarioLogado = ConfiguracaoFirebase.getIdUsuario();
                compra.setIdPessoa(idUsuarioLogado);
                compra.setValor(produtoSelecionado.getPreco());
                compra.setQtd(1);

                long date = System.currentTimeMillis();
                SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
                String dataString = sdf.format(date);
                compra.setDataCompra(dataString);
                compra.setProdutoList(postagens);

                //compras.add(compra);
                int idCompra = (int)compraRepository.insert(compra);
                exibirMensagem("Compra realizada!");


                //Como pegar a ID do objeto criado agora no banco, sendo esse id autogenerated???????????


                //Como preencher a tabela relacional??????????????????????????
                relCompraProduto = new RelCompraProduto(produtoSelecionado.getId(), idCompra);
                repository.getRelCompraProdutoRepository().insert(relCompraProduto);
            }

            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {

            }
        }));

        //Configura toolbar
        Toolbar toolbar = findViewById(R.id.toolbar);
        toolbar.setTitle("Produtos");
        setSupportActionBar(toolbar);
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {

        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.menu_compras, menu);
        return super.onCreateOptionsMenu(menu);
    }

    //Switch case menu
    public boolean onOptionsItemSelected(MenuItem item) {

        switch (item.getItemId()) {
            case R.id.menuSair:
                deslogarUsuario();
                break;

            case R.id.menuAlterarDados:
                alterarDados();
                break;

            case R.id.menuCadastrarProduto:
                cadastrarProduto();
                break;
            //case R.id.menuExcluirDados:
            //excluirUsuario();
            //break;
            case R.id.menuCompras:
                carrinhoCompras();
                break;

        }
        return super.onOptionsItemSelected(item);
    }

    private void deslogarUsuario() {
        try {
            autenticacao.signOut();
            //startActivity(new Intent(HomeActivity.this, AutenticacaoActivity.class));
            finish();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void alterarDados() {
        startActivity(new Intent(HomeActivity.this, ConfiguracoesActivity.class));

    }

    private void cadastrarProduto() {
        startActivity(new Intent(HomeActivity.this, CadastrarProdutoActivity.class));

    }

    private void carrinhoCompras() {
        //startActivity(new Intent(HomeActivity.this, ComprasActivity.class));

        startActivity(new Intent(HomeActivity.this, CarrinhoActivity.class));

    }

    private void excluirUsuario() {
        autenticacao.getCurrentUser().delete();
        startActivity(new Intent(HomeActivity.this, AutenticacaoActivity.class));
    }

    public void prepararPostagens() {

        atualizarProduto();


    }


    private void atualizarProduto() {
        List<Produto> produtosList = repository.getProdutoRepository().getAllProdutos();
        for (Produto produto : produtosList) {
            String nome = produto.getNome();
            String descricao = produto.getDescricao();
            String preco = produto.getPreco();
            Produto postaProduto = new Produto(nome, descricao, preco, R.drawable.bolo);
            postaProduto.setId(produto.getId());
            this.postagens.add(postaProduto);
        }

    }

    public Bitmap loadImageFromStorage(String path, int idProduto) {
        try {
            File f = new File(path, idProduto + ".jpg");
            Bitmap b = BitmapFactory.decodeStream(new FileInputStream(f));
            ImageView img = (ImageView) findViewById(R.id.imageProduto);
            img.setImageBitmap(b);
            return b;
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }

        return null;
    }

    public void exibirMensagem(String texto) {
        Toast.makeText(this, texto, Toast.LENGTH_SHORT).show();
    }

}
